// Code generated by mockery v1.0.0
package function

import mock "github.com/stretchr/testify/mock"

// MockTextAnalyticsService is an autogenerated mock type for the TextAnalyticsService type
type MockTextAnalyticsService struct {
	mock.Mock
}

// FetchKeyPhrases provides a mock function with given fields: req
func (_m *MockTextAnalyticsService) FetchKeyPhrases(req *AnalyzeRequest) ([]string, error) {
	ret := _m.Called(req)

	var r0 []string
	if rf, ok := ret.Get(0).(func(*AnalyzeRequest) []string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*AnalyzeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLanguage provides a mock function with given fields: text
func (_m *MockTextAnalyticsService) FetchLanguage(text string) (*LanguageResult, error) {
	ret := _m.Called(text)

	var r0 *LanguageResult
	if rf, ok := ret.Get(0).(func(string) *LanguageResult); ok {
		r0 = rf(text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LanguageResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchSentiment provides a mock function with given fields: req
func (_m *MockTextAnalyticsService) FetchSentiment(req *AnalyzeRequest) (float64, error) {
	ret := _m.Called(req)

	var r0 float64
	if rf, ok := ret.Get(0).(func(*AnalyzeRequest) float64); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*AnalyzeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
